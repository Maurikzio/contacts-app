{"version":3,"sources":["logo.svg","Components/Contact/Contact.js","Components/Contacts/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contact","firstName","lastName","phone","gender","genderSign","className","Contacts","props","updateSearchValue","event","setState","search","target","value","updateFilterValue","filters","state","map","item","indicator","filterByGender","genderToFind","filter","contacts","contact","includes","filterByPeronalInfo","data","toLowerCase","render","onChange","placeholder","type","checked","result","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9d022e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nimport './contact.css'\n\nfunction Contact({firstName, lastName, phone, gender}){\n    let genderSign = ''\n    if(gender === 'male'){\n        genderSign = <span>&#9794;</span> \n    }else if(gender === 'female'){\n        genderSign = <span>&#9792;</span>\n    }else{\n        genderSign = <span>&#9900;</span>\n    }\n    \n    return(\n        <li className='contact'>\n            <p className='name'>{firstName} {lastName}</p>\n            <p className='gender'>{genderSign}</p>\n            <p className='phone'>{phone} </p>\n        </li>\n    )\n}\nexport default Contact;","import React, { Component } from 'react';\nimport Contact from '../Contact/Contact'\n\nimport './contacts.css'\n\nexport default class Contacts extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            contacts: props.data,\n            search: '',\n            filters: [\n                {indicator: 'male', value: true},\n                {indicator: 'female', value: true},\n                {indicator: 'unknown', value: true},\n            ]\n        }\n    }\n    updateSearchValue = (event) => (\n        this.setState({\n            search: event.target.value,\n        })\n    )\n\n    updateFilterValue = (event) => {\n        this.setState({\n            filters: this.state.filters.map(item => \n                item.indicator === event.target.value \n                ? {...item, value: !item.value} \n                : item)\n        })\n    }\n\n    filterByGender = () => {\n        const genderToFind = this.state.filters.filter(item => item.value).map(item => item.indicator);\n        return this.state.contacts.filter(contact => genderToFind.includes(!(contact.gender) ? 'unknown' : contact.gender))\n    }\n\n    filterByPeronalInfo = (data) => {\n        return data.filter(item => \n                item.firstName.toLowerCase().includes(this.state.search.toLowerCase()) \n                || item.lastName.toLowerCase().includes(this.state.search.toLowerCase()) \n                || item.phone.includes(this.state.search.toLowerCase()))\n    }\n\n    render = () => (\n        <div className='container'>\n            <h2>Contacts</h2>\n            <div className='searchBar'>\n                <p>&#9906;</p>\n                <input value={this.state.search} onChange={this.updateSearchValue} placeholder=\"Search\"/>\n            </div>\n\n            <div className='genderFilter'>\n                <label>\n                    <input type='checkbox' value='male' checked={this.state.filters[0].value} onChange={this.updateFilterValue}/>\n                    M\n                </label>\n                <label>\n                    <input type='checkbox' value='female' checked={this.state.filters[1].value} onChange={this.updateFilterValue}/>\n                    F\n                </label>\n                <label>\n                    <input type='checkbox' value='unknown' checked={this.state.filters[2].value} onChange={this.updateFilterValue}/>\n                    NA\n                </label>\n            </div>\n\n            <ul className='contactList'>\n                {this.filterByPeronalInfo(this.filterByGender()).map(result => (\n                    <Contact key={result.firstName} {...result}/>\n                ))} \n            </ul>\n        </div>\n    )\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Contacts from './Components/Contacts/Contacts'\n\nconst contacts = [{\n      firstName: \"Барней\",\n      lastName: \"Стинсовский\",\n      phone: \"+380956319521\",\n      gender: \"male\"\n  }, \n  {\n      firstName: \"Робин\",\n      lastName: \"Щербатская\",\n      phone: \"+380931460123\",\n      gender: \"female\"\n  }, \n  {\n      firstName: \"Аномный\",\n      lastName: \"Анонимус\",\n      phone: \"+380666666666\"\n  }, \n  {\n      firstName: \"Лилия\",\n      lastName: \"Олдровна\",\n      phone: \"+380504691254\",\n      gender: \"female\"\n  }, \n  {\n      firstName: \"Маршэн\",\n      lastName: \"Эриксонян\",\n      phone: \"+380739432123\",\n      gender: \"male\"\n  }, \n  {\n      firstName: \"Теодор\",\n      lastName: \"Мотсбэс\",\n      phone: \"+380956319521\",\n      gender: \"male\"\n  },\n  {\n    firstName: \"Теоoo\",\n    lastName: \"Мот\",\n    phone: \"+380956319521\",\n    gender: \"female\"\n}\n];\n\nfunction App() {\n  return (\n    <Contacts data={contacts}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}